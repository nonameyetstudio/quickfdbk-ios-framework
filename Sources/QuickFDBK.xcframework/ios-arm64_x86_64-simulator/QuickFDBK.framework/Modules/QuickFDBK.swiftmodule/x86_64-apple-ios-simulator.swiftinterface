// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuickFDBK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CommonCrypto
import Foundation
import Photos
@_exported import QuickFDBK
import ReplayKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum ShareMethod : Swift.String {
  case shareSheet
  case trello
  case monday
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Configs {
  var shareMethod: QuickFDBK.ShareMethod { get }
}
public struct TrelloConfigs : QuickFDBK.Configs {
  public var shareMethod: QuickFDBK.ShareMethod
  public init(idList: Swift.String, key: Swift.String, token: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class QuickFDBKKit : ObjectiveC.NSObject {
  public static let shared: QuickFDBK.QuickFDBKKit
  public enum FeedbackGesture {
    case shake
    case fourFingers
    public static func == (a: QuickFDBK.QuickFDBKKit.FeedbackGesture, b: QuickFDBK.QuickFDBKKit.FeedbackGesture) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func initialize(activationKey: Swift.String, feedbackGesture: QuickFDBK.QuickFDBKKit.FeedbackGesture = .shake, testingNotes: Swift.String = "", hasWebGL: Swift.Bool = false, options: QuickFDBK.Configs? = nil)
  public func applicationDidBecomeActive()
  public func startFeedback()
  @objc deinit
  @objc override dynamic public init()
}
extension QuickFDBK.QuickFDBKKit : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension QuickFDBK.ShareMethod : Swift.Equatable {}
extension QuickFDBK.ShareMethod : Swift.Hashable {}
extension QuickFDBK.ShareMethod : Swift.RawRepresentable {}
extension QuickFDBK.QuickFDBKKit.FeedbackGesture : Swift.Equatable {}
extension QuickFDBK.QuickFDBKKit.FeedbackGesture : Swift.Hashable {}
